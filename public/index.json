[{"content":"Inline Code This is Inline Code\nOnly pre Code block with backticks \u0026lt;!DOCTYPE html\u0026gt;\r\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;meta\rname=\u0026#34;description\u0026#34;\rcontent=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34;\r/\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt; Code block with backticks and language specified \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with backticks and language specified with line numbers 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Code block with line numbers and highlighted lines PaperMod supports linenos=true or linenos=table 1 2 3 4 5 6 7 8 9 10 11 12 13 14 \u0026lt;!DOCTYPE html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;meta name=\u0026#34;description\u0026#34; content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; /\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; With linenos=inline line might not get highlighted properly. This issue is fixed with 045c084 1\u0026lt;!DOCTYPE html\u0026gt; 2\u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; 3 \u0026lt;head\u0026gt; 4 \u0026lt;meta charset=\u0026#34;utf-8\u0026#34; /\u0026gt; 5 \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; 6 \u0026lt;meta 7 name=\u0026#34;description\u0026#34; 8 content=\u0026#34;Sample article showcasing basic Markdown syntax and formatting for HTML elements.\u0026#34; 9 /\u0026gt; 10 \u0026lt;/head\u0026gt; 11 \u0026lt;body\u0026gt; 12 \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; 13 \u0026lt;/body\u0026gt; 14\u0026lt;/html\u0026gt; Code block indented with four spaces \u0026lt;!doctype html\u0026gt;\r\u0026lt;html lang=\u0026quot;en\u0026quot;\u0026gt;\r\u0026lt;head\u0026gt;\r\u0026lt;meta charset=\u0026quot;utf-8\u0026quot;\u0026gt;\r\u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt;\r\u0026lt;/head\u0026gt;\r\u0026lt;body\u0026gt;\r\u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt;\r\u0026lt;/body\u0026gt;\r\u0026lt;/html\u0026gt;\rCode block with Hugo\u0026rsquo;s internal highlight shortcode \u0026lt;!doctype html\u0026gt; \u0026lt;html lang=\u0026#34;en\u0026#34;\u0026gt; \u0026lt;head\u0026gt; \u0026lt;meta charset=\u0026#34;utf-8\u0026#34;\u0026gt; \u0026lt;title\u0026gt;Example HTML5 Document\u0026lt;/title\u0026gt; \u0026lt;/head\u0026gt; \u0026lt;body\u0026gt; \u0026lt;p\u0026gt;Test\u0026lt;/p\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; Github Gist ","permalink":"http://localhost:1313/posts/code-syntax-guide/","summary":"Sample article showcasing basic code syntax and formatting for HTML elements.","title":"Code Syntax Guide"},{"content":"代理：也被叫做正向代理，是一个位于客户端和目标服务器之间的代理服务器。\n作用：客户端将发送的请求和指定的目标服务器提交给代理服务器，然后代理服务器向目标服务器发起请求，并将获得的响应结果返回给客户端的过程。\n反向代理：对于客户端而言就是目标服务器。\n作用：客户端向反向代理服务器发送请求后，反向代理服务器将该请求转发给内部网络上的后端服务器，并将从后端服务器上得到的响应结果返回给客户端。\n►负载均衡(Load Balance)是集群技术（Cluster）的一种应用。将大量的并发请求分担到多个处理节点，从而提高并发处理能力。 由于单个处理节点的故障不影响整个服务，负载均衡集群同时也实现了高可用。\n►任何的负载均衡技术都要建立某种一对多的映射机制，一个请求的入口映射到多个处理请求的节点，不同的机制形成不同的负载均衡技术，常见的包括：\n•手动选择\n•DNS轮询\n•IP负载均衡\n•CDN\nnginx实现负载均衡\n配置方式 说明 轮询方式 负载均衡默认设置方式，每个请求按照时间顺序逐一分配到不同的后端服务器进行处理，如果有服务器宕机，会自动剔除 权重方式 利用weight指定轮询的权重比率，与访问率成正比，用于后端服务器性能不均的情况 ip_hash方式 每个请求按访问IP的hash结果分配，这样可以使每个访客固定访问一个后端服务器，可以解决Session共享的问题 第三方模块 第三方模块采用fair时，按照每台服务器的响应时间来分配请求，响应时间短的优先分配；若第三方模块采用url_hash时，按照访问url的hash值来分配请求 一般轮询 server { listen 80; server_name www.test.com; location / { proxy_pass http://APP; } } \\#配置负载均衡服务器组 Upstream APP { server 172.18.0.111; server 172.18.0.112; } 加权轮询 server { listen 80; server_name www.test.com; location / { proxy_pass http://APP; } } \\#配置负载均衡服务器组 Upstream APP { server 172.18.0.111 weight=1; server 172.18.0.112 weight=3; } ip hash server { listen 80; server_name www.test.com; location / { proxy_pass http://APP; } } \\#配置负载均衡服务器组 Upstream APP { ip_hash; server 172.18.0.111; server 172.18.0.112; } 案例任务名称 配置nginx反向代理和负载均衡 案例训练目标 1、 学会配置nginx反向代理 2、 使用nginx配置负载均衡 包含技能点 1、 配置nginx的proxy_pass 2、 配置nginx的upstream 案例子任务一、配置nginx反向代理，使用nginx1、APP1、APP2三个容器\n步骤1：使用php-apache镜像启动APP1和APP2两个容器\n#docker network create \u0026ndash;subnet=172.18.0.0/16 cluster //创建docker网络，截图 #docker network ls //查看宿主机上的docker网络类型种类，截图 启动容器APP1，设定地址为172.18.0.111，截图 docker run -d \u0026ndash;privileged \u0026ndash;net cluster \u0026ndash;ip 172.18.0.111 \u0026ndash;name APP1 php-apache /usr/sbin/init\n启动容器APP2，设定地址为172.18.0.112，截图 docker run -d \u0026ndash;privileged \u0026ndash;net cluster \u0026ndash;ip 172.18.0.112 \u0026ndash;name APP2 php-apache /usr/sbin/init\n配置容器APP1，编辑首页内容为“site1”，在宿主机访问，截图 配置容器APP1，编辑首页内容为“site2”，在宿主机访问，截图 步骤2：使用nginx镜像启动nginx1容器，配置反向代理\n启动容器nginx1，设定地址为172.18.0.11，截图 docker run -d \u0026ndash;privileged \u0026ndash;net cluster \u0026ndash;ip 172.18.0.11 -p 80:80 \u0026ndash;name nginx1 nginx /usr/sbin/init\n在容器nginx1编辑/etc/nginx/nginx.conf文件，重新启动nginx服务，截图 #配置两台虚拟主机\nserver { listen 80; server_name site1.test.com; location / { proxy_pass http://172.18.0.111; } } server { listen 80; server_name site2.test.com; location / { proxy_pass http://172.18.0.112; } }在主机编辑hosts文件，并使用ping命令检查，截图 宿主机的IP地址 site1.test.com\n宿主机的IP地址 site2.test.com\n宿主机的IP地址 www.test.com\n在主机使用浏览器访问site1.test.com，截图 在主机使用浏览器访问site2.test.com，截图 案例子任务二、配置nginx负载均衡，使用nginx1、APP1、APP2三个容器\n步骤1：保持以上三个容器不变\n步骤2：使用nginx1容器，配置nginx一般轮询负载均衡**\n在容器nginx1编辑/etc/nginx/nginx.conf文件，重新启动nginx服务，截图 #配置 www.test.com虚拟主机\n在主机使用浏览器访问 www.test.com并不断刷新，截图 步骤3：使用nginx1容器，配置nginx IP哈希轮询\n在容器nginx1编辑/etc/nginx/conf.d/default.conf文件，重新启动nginx服务，截图 #配置 www.test.com虚拟主机\nserver { listen 80; server_name www.test.com; location / { proxy_pass http://APP; } } \\#配置负载均衡服务器组 Upstream APP { ip_hash; server 172.18.0.111; server 172.18.0.112; } 在主机使用浏览器访问 www.test.com并不断刷新，截图 ","permalink":"http://localhost:1313/posts/nginx%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1%E4%B8%8E%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/","summary":"代理：也被叫做正向代理，是一个位于客户端和目标服务器之间的代理服务器。\n作用：客户端将发送的请求和指定的目标服务器提交给代理服务器，然后代理服务器向目标服务器发起请求，并将获得的响应结果返回给客户端的过程。\n反向代理：对于客户端而言就是目标服务器。\n作用：客户端向反向代理服务器发送请求后，反向代理服务器将该请求转发给内部网络上的后端服务器，并将从后端服务器上得到的响应结果返回给客户端。\n►负载均衡(Load Balance)是集群技术（Cluster）的一种应用。将大量的并发请求分担到多个处理节点，从而提高并发处理能力。 由于单个处理节点的故障不影响整个服务，负载均衡集群同时也实现了高可用。\n►任何的负载均衡技术都要建立某种一对多的映射机制，一个请求的入口映射到多个处理请求的节点，不同的机制形成不同的负载均衡技术，常见的包括：\n•手动选择\n•DNS轮询\n•IP负载均衡\n•CDN\nnginx实现负载均衡\n配置方式 说明 轮询方式 负载均衡默认设置方式，每个请求按照时间顺序逐一分配到不同的后端服务器进行处理，如果有服务器宕机，会自动剔除 权重方式 利用weight指定轮询的权重比率，与访问率成正比，用于后端服务器性能不均的情况 ip_hash方式 每个请求按访问IP的hash结果分配，这样可以使每个访客固定访问一个后端服务器，可以解决Session共享的问题 第三方模块 第三方模块采用fair时，按照每台服务器的响应时间来分配请求，响应时间短的优先分配；若第三方模块采用url_hash时，按照访问url的hash值来分配请求 一般轮询 server { listen 80; server_name www.test.com; location / { proxy_pass http://APP; } } \\#配置负载均衡服务器组 Upstream APP { server 172.18.0.111; server 172.18.0.112; } 加权轮询 server { listen 80; server_name www.test.com; location / { proxy_pass http://APP; } } \\#配置负载均衡服务器组 Upstream APP { server 172.18.0.111 weight=1; server 172.18.0.112 weight=3; } ip hash server { listen 80; server_name www.","title":"nginx负载均衡与反向代理"},{"content":"raid0（高性能，大容量，安全性低无冗余备份）\nraid1（一半用于备份）\nraid 2-4(校验数据分布在一块盘上)\nraid5(校验数据分布在各个盘上两块盘损坏数据丢失)\nraid6（两次奇偶校验最少4块）\nraid10（raid1和0结合）\nraid50（先raid5再条带化）\nSAN网络存储（FC将scsi封装到光纤协议）\nIP存储（以太网交换机，将scsi封装到ip）\nCAP理论（一致性、可用性、容错性不可同时满足）\nBASE理论（基本可用、软状态、最终一致性）\n","permalink":"http://localhost:1313/posts/raid/","summary":"raid0（高性能，大容量，安全性低无冗余备份）\nraid1（一半用于备份）\nraid 2-4(校验数据分布在一块盘上)\nraid5(校验数据分布在各个盘上两块盘损坏数据丢失)\nraid6（两次奇偶校验最少4块）\nraid10（raid1和0结合）\nraid50（先raid5再条带化）\nSAN网络存储（FC将scsi封装到光纤协议）\nIP存储（以太网交换机，将scsi封装到ip）\nCAP理论（一致性、可用性、容错性不可同时满足）\nBASE理论（基本可用、软状态、最终一致性）","title":"raid"}]